<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="mapper.UserMapper">

    <resultMap id="userMap" type="domain.User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="birthday" column="birthday"/>
        <result property="sex" column="sex"/>
        <result property="address" column="address"/>
    </resultMap>

    <update id="updateUser" parameterType="domain.User">
        update user
        set username=#{username},
            birthday=#{birthday},
            sex=#{sex},
            address=#{address}
        where id = #{id};
    </update>

    <delete id="deleteById" parameterType="integer">
        delete
        from user
        where id = #{id};
    </delete>

    <insert id="saveUser" parameterType="domain.User">
        <selectKey keyProperty="id" keyColumn="id" resultType="int" order="AFTER">
            select last_insert_id();
        </selectKey>
        insert into user(username, birthday, sex, address)
        values (#{username}, #{birthday}, #{sex}, #{address});
    </insert>

    <select id="findAll" resultMap="userMap">
        select *
        from user;
    </select>

    <select id="getUser" resultType="domain.User" parameterType="integer">
        select *
        from user
        where id = #{id};
    </select>

    <select id="getUserByName" resultType="domain.User" parameterType="string">
        select *
        from user
        where username like #{username};
    </select>

    <select id="getUserCount" resultType="java.lang.Integer">
        select count(*)
        from user;
    </select>

    <select id="getUserByQueryVo" resultType="domain.User" parameterType="domain.QueryVo">
        select *
        from user
        where username like #{user.username};
    </select>

    <select id="getUserByUsername" resultType="domain.User">
        select * from user
        <where>
            <if test="username!=null">
                and username like #{username}
            </if>
            <if test="sex!=null">
                and sex=#{sex}
            </if>
        </where>
    </select>

    <sql id="defaultUser">
        select * from user
    </sql>

    <select id="getUserByVo" resultType="domain.User" parameterType="domain.QueryVo">
        <include refid="defaultUser"/>
        <where>
            <if test="ids!=null and ids.size()>0">
                <foreach collection="ids" open="id in (" close=")" item="uid" separator=",">
                    #{uid}
                </foreach>
            </if>
        </where>
    </select>

    <resultMap id="userAccountMap" type="user">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="sex" column="sex"/>
        <result property="birthday" column="birthday"/>
        <result property="address" column="address"/>
        <collection property="accounts" ofType="account">
            <id property="id" column="aid"/>
            <result property="uid" column="uid"/>
            <result property="money" column="money"/>

        </collection>
    </resultMap>

    <select id="findAll2" resultMap="userAccountMap">
        select *,a.id as aid from user u left outer join account a on u.id=a.uid;
    </select>


</mapper>